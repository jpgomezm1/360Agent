#!/usr/bin/env node
/**
 * Script para probar conversaci√≥n completa
 * Uso: npm run test-conversation
 */
import conversationManager from '../src/core/conversationManager.js';

async function testConversation() {
  try {
    console.log('ü§ñ Probando conversaci√≥n completa...');

    // Datos de prueba
    const testProperty = {
      nombre: "Test",
      apellido: "Usuario",
      tipo_documento: "CC",
      numero_documento: "123456789",
      pais: "Colombia",
      celular: "573000000000",
      email: "test@example.com",
      ciudad_inmueble: "Medell√≠n",
      direccion_inmueble: "Calle Test # 123",
      matricula_inmobiliaria: `TEST_${Date.now()}`,
      timestamp: new Date().toISOString()
    };

    // Inicializar conversaci√≥n
    console.log('üìû Inicializando conversaci√≥n...');
    const initResult = await conversationManager.initializeConversation(testProperty);
    
    if (!initResult.success) {
      throw new Error(`Error al inicializar: ${initResult.message}`);
    }

    console.log('‚úÖ Conversaci√≥n inicializada:', initResult.propertyId);

    // Simular respuestas del usuario
    const responses = [
      "Es un apartamento",
      "Est√° en el piso 5 y tiene 80 metros cuadrados",
      "Tiene 3 habitaciones y 2 ba√±os",
      "S√≠, tiene 1 parqueadero",
      "Es estrato 4",
      "Fue construido en 2015",
      "Est√° usado pero en buen estado",
      "El precio es 350 millones de pesos",
      "S√≠, el precio es negociable",
      "Nos mudamos por trabajo",
      "Esperamos venderlo en 3-6 meses",
      "S√≠, aceptamos cr√©dito hipotecario",
      "No tiene deudas pendientes"
    ];

    // Procesar cada respuesta
    for (let i = 0; i < responses.length; i++) {
      console.log(`\nüìù Procesando respuesta ${i + 1}: "${responses[i]}"`);
      
      const result = await conversationManager.processUserMessage(
        testProperty.celular,
        responses[i]
      );

      if (result.success) {
        console.log(`‚úÖ Respuesta procesada. Completitud: ${result.completionPercentage || 'N/A'}%`);
        if (result.nextField) {
          console.log(`üîÑ Siguiente campo: ${result.nextField}`);
        }
        if (result.type === 'completion') {
          console.log('üéâ ¬°Conversaci√≥n completada!');
          break;
        }
      } else {
        console.log(`‚ùå Error: ${result.message}`);
      }

      // Peque√±a pausa entre mensajes
      await new Promise(resolve => setTimeout(resolve, 500));
    }

    console.log('\n‚úÖ Test de conversaci√≥n completado');

  } catch (error) {
    console.error('‚ùå Error en test de conversaci√≥n:', error);
    process.exit(1);
  }
}

// Ejecutar test
testConversation();